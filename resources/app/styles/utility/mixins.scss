@mixin newFont($family,$pathName,$weight, $style: normal) {
    @font-face {
        font-family: '#{$family}';
        src: url('/public/fonts/#{$pathName}.woff2') format('woff2'), url('/public/fonts/#{$pathName}.woff') format('woff');
        font-weight: #{$weight};
        font-style: $style;
        font-display: swap;
    }
}

@mixin getIcon($name) {
    content: map-get($icons, $name);
}

@mixin iconsModify() {
    @each $name, $glyph in $icons {
        &--#{$name} {
            &::before {
                content: $glyph;
            }
        }
    }
}

@mixin getPositionStyle($style, $direction, $value) {
    @if $direction == $style {
        #{ $direction }: $value;
    }

    @else if $direction == vertical {
        $styleNameTop: '#{ $style }-top';
        $styleNameBottom: '#{ $style }-bottom';

        #{$styleNameTop}: $value;
        #{$styleNameBottom}: $value;
    }

    @else if $direction == horizontal {

        $styleNameLeft: #{ $style } + '-left';
        $styleNameRight: #{ $style } + '-right';

        #{$styleNameLeft}: $value;
        #{$styleNameRight}: $value;
        #{ $style }: 0 $value;
    }

    @else if $direction == both {
        #{ $style }: $value;
    }

    @else {
        $styleName: '#{ $style }-#{ $direction }';

        #{ $styleName }: #{$value};
    }
}

@mixin marginLevel($direction, $color, $sign: plus) {
    $styleName: margin;

    @each $spaceLevel, $pixels in $spaces {
        @if $spaceLevel == $color {
            @if (length(map-get($spaces, $spaceLevel)) == 1) {
                $value: nth(map-get($spaces, $spaceLevel), 1);

                @if ($sign == minus) {
                    $value: -#{$value};
                }

                @include getPositionStyle($styleName, $direction, $value);
            }

            @else {
                @if (nth(map-get($spaces, $spaceLevel), 1) == nth(map-get($spaces, $spaceLevel), 2)) {
                    @media (max-width: $maxTablet) {
                        $value: nth(map-get($spaces, $spaceLevel), 1);

                        @if ($sign == minus) {
                            $value: -#{$value};
                        }

                        @include getPositionStyle($styleName, $direction, $value);
                    }

                    @media (min-width: $desktop) {
                        $value: nth(map-get($spaces, $spaceLevel), 3);

                        @if ($sign == minus) {
                            $value: -#{$value};
                        }

                        @include getPositionStyle($styleName, $direction, $value);
                    }
                }

                @else if (nth(map-get($spaces, $spaceLevel), 2) == nth(map-get($spaces, $spaceLevel), 3)) {
                    @media (max-width: $maxMobileLate) {
                        $value: nth(map-get($spaces, $spaceLevel), 1);

                        @if ($sign == minus) {
                            $value: -#{$value};
                        }

                        @include getPositionStyle($styleName, $direction, $value);
                    }

                    @media (min-width: $tabletLate) and (max-width: $maxTablet) {
                        $value: nth(map-get($spaces, $spaceLevel), 2);

                        @if ($sign == minus) {
                            $value: -#{$value};
                        }

                        @include getPositionStyle($styleName, $direction, $value);
                    }
                }

                @else {
                    @media (max-width: $maxMobileLate) {
                        $value: nth(map-get($spaces, $spaceLevel), 1);

                        @if ($sign == minus) {
                            $value: -#{$value};
                        }

                        @include getPositionStyle($styleName, $direction, $value);
                    }

                    @media (min-width: $tabletLate) and (max-width: $maxTablet) {
                        $value: nth(map-get($spaces, $spaceLevel), 2);

                        @if ($sign == minus) {
                            $value: -#{$value};
                        }

                        @include getPositionStyle($styleName, $direction, $value);
                    }

                    @media (min-width: $desktop) {
                        $value: nth(map-get($spaces, $spaceLevel), 3);

                        @if ($sign == minus) {
                            $value: -#{$value};
                        }

                        @include getPositionStyle($styleName, $direction, $value);
                    }
                }
            }
        }
    }
}

@mixin paddingLevel($direction,$color) {
    @each $spaceLevel, $pixels in $spaces {
        @if $spaceLevel == $color {
            @if (length(map-get($spaces, $spaceLevel)) == 1) {
                $value: nth(map-get($spaces, $spaceLevel), 1);

                @include getPositionStyle(padding, $direction, $value);
            }

            @else {
                @if (nth(map-get($spaces, $spaceLevel), 1) == nth(map-get($spaces, $spaceLevel), 2)) {
                    @media (max-width: $maxTablet) {
                        $value: nth(map-get($spaces, $spaceLevel), 1);

                        @include getPositionStyle(padding, $direction, $value);
                    }

                    @media (min-width: $desktop) {
                        $value: nth(map-get($spaces, $spaceLevel), 3);

                        @include getPositionStyle(padding, $direction, $value);
                    }
                }

                @else if (nth(map-get($spaces, $spaceLevel), 2) == nth(map-get($spaces, $spaceLevel), 3)) {
                    @media (max-width: $maxMobileLate) {
                        $value: nth(map-get($spaces, $spaceLevel), 1);

                        @include getPositionStyle(padding, $direction, $value);
                    }

                    @media (min-width: $tabletLate) {
                        $value: nth(map-get($spaces, $spaceLevel), 2);

                        @include getPositionStyle(padding, $direction, $value);
                    }
                }

                @else {
                    @media (max-width: $maxMobileLate) {
                        $value: nth(map-get($spaces, $spaceLevel), 1);

                        @include getPositionStyle(padding, $direction, $value);
                    }

                    @media (min-width: $tabletLate) and (max-width: $maxTablet) {
                        $value: nth(map-get($spaces, $spaceLevel), 2);

                        @include getPositionStyle(padding, $direction, $value);
                    }

                    @media (min-width: $desktop) {
                        $value: nth(map-get($spaces, $spaceLevel), 3);

                        @include getPositionStyle(padding, $direction, $value);
                    }
                }
            }
        }
    }
}

@mixin fontSize($name, $options:()) {
    @each $tagName, $tagValue in $tags {
        @if $tagName == $name {
            @if nth(map-get($tags, $tagName), 1) == nth(map-get($tags, $tagName), 2) and nth(map-get($tags, $tagName), 1) == nth(map-get($tags, $tagName), 3) {
                font-size: nth(map-get($tags, $tagName), 1);
            }

            @else if nth(map-get($tags, $tagName), 1) == nth(map-get($tags, $tagName), 2) {
                @media (max-width: $maxTablet) {
                    font-size: nth(map-get($tags, $tagName), 1);
                }

                @media (min-width: $desktop) {
                    font-size: nth(map-get($tags, $tagName), 3);
                }
            }

            @else if nth(map-get($tags, $tagName), 2) == nth(map-get($tags, $tagName), 3) {
                @media (max-width: $maxMobileLate) {
                    font-size: nth(map-get($tags, $tagName), 1);
                }

                @media (min-width: $tabletLate) {
                    font-size: nth(map-get($tags, $tagName), 2);
                }
            }

            @else {
                @media (max-width: $maxMobileLate) {
                    font-size: nth(map-get($tags, $tagName), 1);
                }

                @media (min-width: $tabletLate) and (max-width: $maxTablet) {
                    font-size: nth(map-get($tags, $tagName), 2);
                }

                @media (min-width: $desktop) {
                    font-size: nth(map-get($tags, $tagName), 3);
                }
            }

            @if length(nth(map-get($tags, $tagName), 4)) > 1 {
                @media (max-width: $maxMobileLate) {
                    line-height: nth(nth(map-get($tags, $tagName), 4), 1);
                }

                @media (min-width: $tabletLate) and (max-width: $desktop) {
                    line-height: nth(nth(map-get($tags, $tagName), 4), 2);
                }

                @media (min-width: $desktop) {
                    line-height: nth(nth(map-get($tags, $tagName), 4), 3);
                }
            }

            @else {
                line-height: nth(map-get($tags, $tagName), 4);
            }

            @if map-get($options, weight) {
                font-weight: #{map-get($options, weight)};
            }

            @if map-get($options, style) {
                font-style: map-get($options, style);
            }

            @if map-get($options, mono) {
                @include mono-space;
            }
        }
    }
}

@mixin positionLevel($direction,$color,$sign: plus) {
    $styleName: $direction;

    @each $spaceLevel, $pixels in $spaces {
        @if $spaceLevel == $color {
            @if (length(map-get($spaces, $spaceLevel)) == 1) {
                $value: nth(map-get($spaces, $spaceLevel), 1);

                @if ($sign == minus) {
                    $value: -#{$value};
                }

                @include getPositionStyle($styleName, $direction, $value);
            }

            @else {
                @if (nth(map-get($spaces, $spaceLevel), 1) == nth(map-get($spaces, $spaceLevel), 2)) {
                    @media (max-width: $maxTablet) {
                        $value: nth(map-get($spaces, $spaceLevel), 1);

                        @if ($sign == minus) {
                            $value: -#{$value};
                        }

                        @include getPositionStyle($styleName, $direction, $value);
                    }

                    @media (min-width: $desktop) {
                        $value: nth(map-get($spaces, $spaceLevel), 3);

                        @if ($sign == minus) {
                            $value: -#{$value};
                        }

                        @include getPositionStyle($styleName, $direction, $value);
                    }
                }

                @else if (nth(map-get($spaces, $spaceLevel), 2) == nth(map-get($spaces, $spaceLevel), 3)) {
                    @media (max-width: $maxMobile) {
                        $value: nth(map-get($spaces, $spaceLevel), 1);

                        @if ($sign == minus) {
                            $value: -#{$value};
                        }

                        @include getPositionStyle($styleName, $direction, $value);
                    }

                    @media (min-width: $tablet) and (max-width: $maxTablet) {
                        $value: nth(map-get($spaces, $spaceLevel), 2);

                        @if ($sign == minus) {
                            $value: -#{$value};
                        }

                        @include getPositionStyle($styleName, $direction, $value);
                    }
                }

                @else {
                    @media (max-width: $maxMobile) {
                        $value: nth(map-get($spaces, $spaceLevel), 1);

                        @if ($sign == minus) {
                            $value: -#{$value};
                        }

                        @include getPositionStyle($styleName, $direction, $value);
                    }

                    @media (min-width: $tablet) and (max-width: $maxTablet) {
                        $value: nth(map-get($spaces, $spaceLevel), 2);

                        @if ($sign == minus) {
                            $value: -#{$value};
                        }

                        @include getPositionStyle($styleName, $direction, $value);
                    }

                    @media (min-width: $desktop) {
                        $value: nth(map-get($spaces, $spaceLevel), 3);

                        @if ($sign == minus) {
                            $value: -#{$value};
                        }

                        @include getPositionStyle($styleName, $direction, $value);
                    }
                }
            }
        }
    }
}

@mixin center($position:'both') {
    position: absolute;

    @if $position == 'vertical' {
        top: 50%;
        transform: translateY(-50%);
    }

    @else if $position == 'horizontal' {
        left: 50%;
        transform: translateX(-50%);
    }

    @else if $position == 'both' {
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    @else if $position == 'stretch' {
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
}

@mixin ellipsis {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 100%;
}

@mixin mono-space {
    font-feature-settings: 'tnum' on, 'lnum' on;
}

@mixin media-hover-device {
    @media (hover: hover), (min-width: $desktop) {
        @content;
    }
}

@mixin media-mobileBig {
    @media (min-width: $mobileBig) {
        @content;
    }
}

@mixin media-maxMobileSmall {
    @media (max-width: $maxMobileSmall) {
        @content;
    }
}

@mixin media-tablet {
    @media (min-width: $tablet) {
        @content;
    }
}

@mixin media-tabletLate {
    @media (min-width: $tabletLate) {
        @content;
    }
}

@mixin media-desktop {
    @media (min-width: $desktop) {
        @content;
    }
}

@mixin media-maxMobile {
    @media (max-width: $maxMobile) {
        @content;
    }
}

@mixin media-maxMobileLate {
    @media (max-width: $maxMobileLate) {
        @content;
    }
}

@mixin media-maxTablet {
    @media (max-width: $maxTablet) {
        @content;
    }
}

@mixin transition-fade-animation($duration: '0.3s') {

    $postfix: '';

    @if ($duration != '0.3s') {
        $postfix: '-' + $duration;
    }

    .fade#{$postfix} {
        &-enter {
            opacity: 0;

            &-active {
                transition: opacity $duration ease-in !important;
            }

            &-to {
                opacity: 1;
            }
        }

        &-leave {
            opacity: 1;

            &-active {
                transition: opacity $duration ease-out !important;
            }

            &-to {
                opacity: 0;
            }
        }
    }
}

@mixin extend-container() {
    @include media-maxMobile {
        padding-left: 5%;
        padding-right: 5%;
        margin-left: -5%;
        margin-right: -5%;
        scroll-padding: 5%;
    }

    @include media-tablet {
        @include media-maxMobileLate {
            padding-left: 6.15%;
            padding-right: 6.15%;
            margin-left: -6.15%;
            margin-right: -6.15%;
            scroll-padding: 6.15%;
        }
    }

    @include media-tabletLate {
        padding-left: 5.2%;
        padding-right: 5.2%;
        margin-left: -5.2%;
        margin-right: -5.2%;
        scroll-padding: 5.2%;
    }

    @include media-desktop {
        padding-left: toRem(48);
        padding-right: toRem(48);
        margin-left: toRem(-48);
        margin-right: toRem(-48);
        scroll-padding: toRem(48);
    }
}
